{"ast":null,"code":"import { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  constructor(messageService) {\n    this.messageService = messageService;\n  }\n  getHeroes() {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n  getHero(id) {\n    // TODO: send the message _after_ fetching the hero\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(HEROES.find(hero => hero.id === id));\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AAGrC,SAASC,MAAM,QAAQ,eAAe;;;AAItC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAAS;IACP;IACA,IAAI,CAACD,cAAc,CAACE,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAON,EAAE,CAACC,MAAM,CAAC;EACnB;EAEAM,OAAO,CAACC,EAAU;IAChB;IACA,IAAI,CAACJ,cAAc,CAACE,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOR,EAAE,CAACC,MAAM,CAACQ,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAChD;;AAdWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAS,SAAXT,WAAW;EAAAU,YADE;AAAM","names":["of","HEROES","HeroService","constructor","messageService","getHeroes","add","getHero","id","find","hero","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\79536\\OneDrive\\Документы\\GitHub\\Web-Development\\lab2\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable<Hero[]> {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number): Observable<Hero> {\n    // TODO: send the message _after_ fetching the hero\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(HEROES.find(hero => hero.id === id));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}