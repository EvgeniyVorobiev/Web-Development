{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes';\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    const url = '${this.heroesUrl}/${id}';\n    return this.http.get(url).pipe(tap(_ => this.log('fetched hero id=${id}')), catchError(this.handleError('getHero id=${id}')));\n  }\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(tap(_ => this.log('updated hero id=${hero.id}')), catchError(this.handleError('updatedHero')));\n  }\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  deleteHero(hero) {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(_ => this.log(`found heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  log(message) {\n    this.messageService.add('HeroService: ${message}');\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      this.log('${operation} failed: ${error.message}');\n      return of(result);\n    };\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","catchError","tap","HttpHeaders","httpOptions","headers","HeroService","constructor","http","messageService","getHeroes","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","updateHero","hero","put","addHero","post","newHero","deleteHero","delete","searchHeroes","term","trim","message","add","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\79536\\OneDrive\\Документы\\GitHub\\Web-Development\\lab2\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\n\nconst httpOptions ={\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(private http: HttpClient ,private messageService: MessageService) { }\n\n  getHeroes (): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  getHero(id: number): Observable<Hero>{\n    const url = '${this.heroesUrl}/${id}';\n\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log('fetched hero id=${id}')),\n      catchError(this.handleError<Hero>('getHero id=${id}'))\n    );\n  }\n\n  updateHero(hero: Hero): Observable<any>{\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n      tap(_ => this.log('updated hero id=${hero.id}')),\n      catchError(this.handleError<any>('updatedHero'))\n    );\n  }\n\n  addHero (hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n\n  deleteHero (hero: Hero | number): Observable<Hero> {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n  \n    return this.http.delete<Hero>(url, httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n\n  searchHeroes(term: string): Observable<Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(_ => this.log(`found heroes matching \"${term}\"`)),\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\n    );\n  }\n\n  private heroesUrl = 'api/heroes';\n\n  private log(message: string){\n    this.messageService.add('HeroService: ${message}');\n  }\n\n  private handleError<T>(operation = 'operation', result? : T){\n    return (error: any): Observable<T> => {\n      console.error(error);\n      this.log('${operation} failed: ${error.message}');\n\n      return of(result as T);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}